import Head from "next/head";
import InputField from "../components/InputField";
import TextField from "../components/textField";
import * as Yup from "yup";
import { Form, Formik } from "formik";
import { QueryClient, dehydrate } from "@tanstack/react-query";
import { getProductData } from "../api-client/product";
import { useGetProductData, useAddProductData } from "../hooks";

const productSchema = Yup.object({
  productName: Yup.string("product name must be a string")
    .max(50, "max length is 50")
    .required("this field is required"),
  productPrice: Yup.number("product price must be a number")
    .required("this field is required")
    .positive("no negative numbers allowed"),
  productDescription: Yup.string().required("this field is required"),
});

export async function getStaticProps() {
  const queryClient = new QueryClient();
  await queryClient.prefetchQuery(["products"], getProductData);

  return {
    props: {
      dehydratedState: dehydrate(queryClient),
    },
  };
}
export default function Home() {
  const { data, isLoading, isFetching, isError, error } = useGetProductData();
  const {
    mutate: addProduct,
    isError: isAddError,
    error: addError,
  } = useAddProductData();

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="min-h-screen  flex flex-col md:grid grid-cols-2 font-mono \">
        <section className="col-start-1 h-screen p-2 flex flex-col gap-2">
          <h1 className="text-5xl text-white p-3 font-bold text-center bg-pink-600 rounded-md mt-2">
            Crud App
          </h1>
          <section className="flex-grow">
            <Formik
              initialValues={{
                productName: "",
                productPrice: "",
                productDescription: "",
              }}
              onSubmit={(values, { resetForm }) => {
                addProduct(values);
                resetForm();
              }}
              validationSchema={productSchema}
            >
              {({ errors, touched }) => (
                <Form className="bg-purple-800 font-semibold rounded-md flex flex-col h-full gap-5 p-4 justify-center">
                  <InputField
                    id="product-name"
                    name="productName"
                    className="rounded-lg shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                  />

                  <InputField
                    id="product-price"
                    name="productPrice"
                    className="rounded-lg shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                  />
                  <TextField
                    name="productDescription"
                    id="product-description"
                    className="rounded-lg shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
                  />
                  <button
                    className="rounded-lg text-white shadow-sm bg-pink-600 py-3 px-3 hover:bg-pink-800 visited:bg-pink-500  focus:border-indigo-500 focus:ring-indigo-500 "
                    type="submit"
                  >
                    Submit
                  </button>
                  <button
                    className="rounded-lg text-white shadow-sm bg-pink-600 py-3 px-3 hover:bg-pink-800 visited:bg-pink-500  focus:border-indigo-500 focus:ring-indigo-500 "
                    type="reset"
                  >
                    Reset
                  </button>
                </Form>
              )}
            </Formik>
          </section>
        </section>
        <section className="col-start-2 h-screen bg-slate-800 p-2 rounded-md"></section>
      </main>
    </>
  );
}
